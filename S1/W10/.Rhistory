log(10)
log(100)
log(exp)
log(exp(1))
log(e)
et = n*log(n) + 0.5772*n+0.5
n = 30
et = n*log(n) + 0.5772*n+0.5
et
matrix(c(1,0,0))
matrix(c(1,0,0),byrow = TRUE)
matrix(c(1,0,0),byrow = FALSE)
matrix(c(1,0,0),byrow = TRUE)
matrix(c(1,0,0),byrow = TRUE)
matrix(c(1,0,0),byrow = F)
matrix(1,0,0,byrow = FALSE)
matrix(c(1,0,0),byrow = F)
matrix(c(1,0,0),1,3)
a = c(0.6,0.1,0.3)
b = c(0.4,0.5,0.1)
c = c(0.2,0.5,0.3)
p = rbind(a,b,c)
p0 = matrix(c(1,0,0),1,3)
p
p0*p
p0 %*% p
p0 %*% (p^2)
p0 %*% p %*% p
#define population levels
populations <- c(A = 100, B = 500, C = 900, D = 1200)
# Look at the relative sizes of the populations
pi <- populations/sum(populations)
pi
barplot(pi, names.arg = names(populations))
# Define function to do simulation
politician.sampling <- function(n, populations, starting.position)
{
output <- rep(0, n)
positions <- seq_along(populations)
current.population <- populations[starting.position]
position <- starting.position
for (i in 1:n)
{
next.position <- sample(positions, size = 1)
next.population <- populations[next.position]
# Compute acceptance probability
p <- min(1, next.population/current.population)
if (runif(1) < p)
{
position <- next.position
current.population <- next.population
}
output[i] <- position
}
output
}
# Number of iterations to simulate
n.iterations <- 1000
simulation.result <- politician.sampling(n.iterations, populations, 4)
# Inspect the probabilities the politician visits each place.
relevant.chances <- table(simulation.result)/n.iterations
relevant.chances
barplot(relevant.chances, names.arg = names(populations))
# Consider how well the simulation does with increasing n
n.iterations <- c(100, 1000, 10000, 100000)
simulation.results <- lapply(n.iterations, politician.sampling,
populations = populations, starting.position = 1)
results.tables <- sapply(simulation.results, table)
normalised.results <- sweep(results.tables, 2, n.iterations, "/")
# Append true distribution
normalised.results <- cbind(normalised.results, pi)
colnames(normalised.results) <- c(paste0("n = ", n.iterations), "pi")
normalised.results
library(RColorBrewer)
palette <- brewer.pal(5, "Dark2")
barplot(t(normalised.results), beside = TRUE,
names.arg = names(populations), col = palette)
legend("topleft", legend = colnames(normalised.results), fill = palette)
# plot data and create the true relationship line
s <- function(x){x^3*sin((x+3.4)/2)}
x.plot <- seq(0, 3, length.out = 1000)
y.plot <- s(x.plot)
plot(x.plot, y.plot, xlab="x-values", ylab="y-values", main="f(x)", type="l")
# Randomly sample from the interval we want to integrate
n = 50000
x <- runif(n, min = 0, max = 3)
sx <- s(x)
# Remember to multiply by the length of the interval from 0 to 3.
ans.mc <- 3*mean(sx)
ans.mc
# use the inbuilt integrate function
ans.quad <- integrate(s, 0, 3)
ans.quad
set.seed(5003)
theta = 0.7 # P(Head)
N = 200
# simulate some coin flips
coin.flips <- rbinom(n = N, size = 1, prob = theta)
likelihood <- function(theta, x)
prod(dbinom(x, size = 1, prob = theta))
