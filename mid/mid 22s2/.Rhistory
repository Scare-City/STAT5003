library(data.table)
library(ConfusionTableR)
library(OddsPlotty)
glimpse(MLDataR::heartdisease)
glimpse(MLDataR::diabetes)
glimpse(MLDataR::thyroiddisease)
glimpse(MLDataR::thyroidisease)
glimpse(MLDataR::CSGO)
glimpse(MLDataR::csgo)
glimpse(MLDataR::diabetesdisease)
MLDataR
?MLDataR
??MLDataR
??MLDataR
glimpse(MLDataR::thyroid_disease)
Sonar
data(Sonar, package = "mlbench")
head(Sonar)
Sonar
set.seed(5003)
library(caret)
fold <- createFolds(Sonar$Class, k = 10)
test.fold.sizes <- vapply(fold, length, numeric(1))
split.data.into.folds <- function(x, dat, n = nrow(dat)) {
which.group = factor(ifelse(seq(n) %in% x, "Test", "Training"))
split(dat, which.group)
}
training.test <- lapply(fold, split.data.into.folds, dat = Sonar, n = nrow(Sonar))
?knn
x
set.seed(5003)
library(caret)
fold <- createFolds(Sonar$Class, k = 10)
test.fold.sizes <- vapply(fold, length, numeric(1))
split.data.into.folds <- function(x, dat, n = nrow(dat)) {
which.group = factor(ifelse(seq(n) %in% x, "Test", "Training"))
split(dat, which.group)
}
training.test <- lapply(fold, split.data.into.folds, dat = Sonar, n = nrow(Sonar))
data(Sonar, package = "mlbench")
head(Sonar)
set.seed(5003)
library(caret)
fold <- createFolds(Sonar$Class, k = 10)
test.fold.sizes <- vapply(fold, length, numeric(1))
split.data.into.folds <- function(x, dat, n = nrow(dat)) {
which.group = factor(ifelse(seq(n) %in% x, "Test", "Training"))
split(dat, which.group)
}
training.test <- lapply(fold, split.data.into.folds, dat = Sonar, n = nrow(Sonar))
k
x
predict.knn <- function(x, k = 5, label.name = "Class") {
predicted <- knn(train = x$Training %>% dplyr::select(-all_of(label.name)),
test = x$Test %>% dplyr::select(-all_of(label.name)),
cl = x$Training[[label.name]], k = k)
observed <- x$Test[[label.name]]
list(predicted = predicted, observed = observed)
}
knn.output <- lapply(training.test, predict.knn)
library(tidyverse)
predict.knn <- function(x, k = 5, label.name = "Class") {
predicted <- knn(train = x$Training %>% dplyr::select(-all_of(label.name)),
test = x$Test %>% dplyr::select(-all_of(label.name)),
cl = x$Training[[label.name]], k = k)
observed <- x$Test[[label.name]]
list(predicted = predicted, observed = observed)
}
knn.output <- lapply(training.test, predict.knn)
library(class)
predict.knn <- function(x, k = 5, label.name = "Class") {
predicted <- knn(train = x$Training %>% dplyr::select(-all_of(label.name)),
test = x$Test %>% dplyr::select(-all_of(label.name)),
cl = x$Training[[label.name]], k = k)
observed <- x$Test[[label.name]]
list(predicted = predicted, observed = observed)
}
knn.output <- lapply(training.test, predict.knn)
knn.output
confusion.matrix <- lapply(knn.output, function(x)
confusionMatrix(x$predicted, x$observed))
# Produce list: for each element of knn.output, apply confusionMatrix
accuracy.estimated <- vapply(confusion.matrix, function(c) c[["overall"]][["Accuracy"]], numeric(1))
metrics.byClass <- vapply(confusion.matrix, function(c) c[["byClass"]],numeric(11))
all.metrics <- rbind(Accuracy = accuracy.estimated, metrics.byClass)
relevant.metrics <- all.metrics[row.names(all.metrics) %in% c("Accuracy", "Sensitivity", "Specificity", "F1"), ]
relevant.metrics
#Average by row
average.metrics <- apply(relevant.metrics, 1, mean)
average.metrics
confusion.matrix <- lapply(knn.output, function(x)
confusionMatrix(x$predicted, x$observed))
# Produce list: for each element of knn.output, apply confusionMatrix
accuracy.estimated <- vapply(confusion.matrix, function(c) c[["overall"]][["Accuracy"]], numeric(1))
metrics.byClass <- vapply(confusion.matrix, function(c) c[["byClass"]],numeric(11))
all.metrics <- rbind(Accuracy = accuracy.estimated, metrics.byClass)
relevant.metrics <- all.metrics[row.names(all.metrics) %in% c("Accuracy", "Sensitivity", "Specificity", "F1"), ]
relevant.metrics
#Average by row
average.metrics <- apply(relevant.metrics, 1, mean)
average.metrics
confusionMatrix
?confusionMatrix
f1.within <- vapply(knn.output, function(x) {
cM <- caret::confusionMatrix(x$predicted, x$observed)
cM[["byClass"]][["F1"]]
}, numeric(1))
f1.within
?all_of
metrics.byClass
accuracy.estimated
metrics.byClass
Sys.setenv("TZ" = "Australia/Sydney")
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
str(q1.list)
str(q1.df)
dim(q1.list)
dims(q1.df)
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
str(q1.list)
str(q1.df)
dim(q1.list)
dim(q1.df)
q1.df
q1.list
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
str(q1.list)
dim(q1.list)
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
str(q1.list)
str(q1.df)
dim(q1.list)
dim(q1.df)
View(q1.list)
View(q1.df)
# Enter your answer here
attributes(q1.list)
# Enter your answer here
attributes(q1.list)
attributes(q1.df)
# Enter your answer here
attributes(q1.list)
attributes(q1.df)
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
str(q1.list)
str(q1.df)
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
str(q1.list)
dim(q1.list)
str(q1.df)
dim(q1.df)
# Enter your answer here
attributes(q1.list)
attributes(q1.df)
?attributes
# Enter your answer here
q1.list.to.df <- as.data.frame(q1.list) # Edit this line
identical(q1.list.to.df, q1.df) # This should evaluate to TRUE
?attr
# Enter your answer here
q1.to.df.via.attr <- attr(q1.list) # Edit this line and add code below to modify attributes
# Enter your answer here
q1.to.df.via.attr <- attr(x,q1.list,q1.df) # Edit this line and add code below to modify attributes
length(q1.list)
q1.list[1]
q1.list[1:2]
q1.df[1]
q1.df[1,]
# Enter your answer here
q1.to.df.via.attr <- attr(q1.list[1:12],q1.df[1:12]) # Edit this line and add code below to modify attributes
# Enter your answer here
boxplot(q1.df$X5)
attr(q1.list[1],q1.df[1])
# Enter your answer here
boxplot(q1.df$X5, group_by(q1.df$Genre))
# Enter your answer here
boxplot(q1.df$X5, q1.df$Genre)
boxplot(q1.df$X5, q1.df$Genre)
# Enter your answer here
boxplot(q1.df$X5~q1.df$Genre)
# Enter your answer here
boxplot(q1.df$X5~q1.df$Genre)
q1.df[q1.df$Genre == 'c']
q1.df[q1.df$Genre == 'c',]
q1.df[[q1.df$Genre == 'c',],]
q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.art']
q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.art',]
q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.art',]
q1.df[ q1.df$Model == 'State.of.the.art',]
q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.Art',]
# Enter your answer here
cm = q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.Art',]
mean(cm$X1)
mean(q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.Art',]$X1)
mean(q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.Art',]$X2)
mean(q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.Art',]$X3)
# Enter your answer here
cm = q1.df[q1.df$Genre == 'c'& q1.df$Model == 'State.of.the.Art',]
mean(cm$X1)
mean(cm$X2)
mean(cm$X3)
# Enter your answer here
pca <- prcomp(q1.df)
View(q1.df[1,10])
q1.df[1,10]
q1.df[1:10,]
q1.df[,1:10]
View(q1.df[,1:10])
# Enter your answer here
q1pca = q1.df[,1:10]
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = q1pca[[ncol(q1pca)]],
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(q1pca[[ncol(q1pca)]]),
col = unclass(unique(q1pca[[ncol(q1pca)]])),
pch = 1)
# Enter your answer here
q1pca = q1.df[,1:10]
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = q1pca[[ncol(q1pca)]],
xlab = "First Component", ylab = "Second Component")
# Enter your answer here
q1pca = q1.df[,1:10]
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = q1.df[[ncol(q1.df)]],
xlab = "First Component", ylab = "Second Component")
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = q1.df[[ncol(q1.df)]],
xlab = "First Component", ylab = "Second Component")
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = factor(q1.df[[ncol(q1.df)]]),
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(q1.df[[ncol(q1.df)]]),
col = unclass(unique(q1.df[[ncol(q1.df)]])),
pch = 1)
q1.df[[ncol(q1.df)]]
setwd("~/Desktop/STAT5003/2022/MId/mid 21s1")
encoded.data <- readRDS("encoded.data.rds")
encoded.data
ncol(encoded.data)
encoded.data[[ncol(encoded.data)]]
q1.df[[ncol(q1.df)]]
factor(q1.df[[ncol(q1.df)]])
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = factor(q1.df[[ncol(q1.df)]]),
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(q1.df[[ncol(q1.df)]]),
col = factor(unclass(unique(q1.df[[ncol(q1.df)]]))),
pch = 1)
unique(q1.df[[ncol(q1.df)]])
q1.df[[ncol(q1.df)]]
unique(q1.df[[ncol(q1.df)]])
unclass(unique(q1.df[[ncol(q1.df)]]))
factor(unclass(unique(q1.df[[ncol(q1.df)]])))
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = factor(q1.df[[ncol(q1.df)]]),
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(q1.df[[ncol(q1.df)]]),
col = factor(unclass(unique(q1.df[[ncol(q1.df)]]))),
pch = 1)
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = factor(q1.df[[ncol(q1.df)]]),
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(q1.df[[ncol(q1.df)]]),
col = factor(unique(q1.df[[ncol(q1.df)]])),
pch = 1)
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = factor(q1.df[[ncol(q1.df)]]),
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(q1.df[[ncol(q1.df)]]),
col = factor(q1.df[[ncol(q1.df)]]),
pch = 1)
factor(q1.df[[ncol(q1.df)]])
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = factor(q1.df[[ncol(q1.df)]]),
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(q1.df[[ncol(q1.df)]]),
col = 1:2,
pch = 1)
levels(q1.df[[ncol(q1.df)]])
q1.df[[ncol(q1.df)]]
# Enter your answer here
pca <- prcomp(q1pca)
plot(pca$x[,1], pca$x[,2], col = factor(q1.df[[ncol(q1.df)]]),
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = unique(q1.df[[ncol(q1.df)]]),
col = factor(unique(q1.df[[ncol(q1.df)]])),
pch = 1)
setwd("~/Desktop/STAT5003/2022/MId/mid 22s2")
property.dat <- readRDS("S2-2022-q2.rds")
# Enter your answer here
property.dat <- readRDS("S2-2022-q2.rds")
# Enter your answer here
dim(property.dat)
pairs(property.dat)
property.dat <- readRDS("S2-2022-q2.rds")
# Enter your answer here
dim(property.dat)
pairs(property.dat)
# Enter your answer here
lm1 = lm(Sold.price ~.,data = property.dat)
# Enter your answer here
lm1 = lm(Sold.price ~.,data = property.dat)
summary(lm1)
# Enter your answer here
lm1 = lm(Sold.price ~ land.estimate + existing + area,data = property.dat)
summary(lm1)
# Enter your answer here
lm1 = lm(Sold.price ~ land.estimate + existing + area,data = property.dat)
coef(lm1)
sigma(lm1)
# Enter your answer here
lm1 = lm(Sold.price ~ land.estimate + existing + area,data = property.dat)
coef(lm1)
sigma(lm1)
X1 <- property.dat[["land.estimate"]]
X1
View(property.dat)
X1 <- property.dat[["land.estimate"]]
X2 <- property.dat[["existing"]]
X2
X3 <- property.dat[["area"]]
X3
Y <- property.dat[["Sold.price"]]
Y
nrow(property.dat)
# Enter your answer here
negLogLikelihood <- function(beta0 = 0, beta1 = 0, beta2 = 0,beta3 = 0, sigma = 1) {
Y <- property.dat[["Sold.price"]]
X1 <- property.dat[["land.estimate"]]
X2 <- property.dat[["existing"]]
X3 <- property.dat[["area"]]
n <- nrow(property.dat)
if (sigma < 0)
return(Inf)
else
n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2-beta3*X3)^2)/(2*(sigma**2))
}
# Enter your answer here
negLogLikelihood <- function(beta0, beta1, beta2,beta3, sigma) {
Y <- property.dat[["Sold.price"]]
X1 <- property.dat[["land.estimate"]]
X2 <- property.dat[["existing"]]
X3 <- property.dat[["area"]]
n <- nrow(property.dat)
if (sigma < 0)
return(Inf)
else
n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2-beta3*X3)^2)/(2*(sigma**2))
}
# Enter your answer here
mle <- stats4::mle(minuslogl = negLogLikelihood,start = list(beta0 = 0, beta1 = 0, beta2 = 0,beta3 = 0, sigma = 1))
mle_coef <- mle@coef
mle_coef
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[0], coef(lm1)[1], coef(lm1)[2], coef(lm1)[3],sigma(lm1), mle_coef), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
?matrix
mle_coef[0]
mle_coef
mle_coef[0]
mle_coef
list(mle_coef)
list(mle_coef)[0]
as.data.frame(mle_coef)[0]
mle_coef
mle_coef[0]
mle
mle$coef
coef(mle)
mle@coef
mle@coef[0]
str(mle@coef)
x(mle@coef)
c(mle_coef)
c(mle_coef)[0]
(mle_coef)[1]
coef(lm1)[1]
coef(lm1)[2]
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], mle_coef[1],coef(lm1)[2], mle_coef[1],coef(lm1)[2], mle_coef[1], coef(lm1)[3],sigma(lm1)), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], mle_coef[1],coef(lm1)[2], mle_coef[1],coef(lm1)[2], mle_coef[1], coef(lm1)[3],sigma(lm1),mle_coef[1]), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], mle_coef[1],coef(lm1)[2], mle_coef[2],coef(lm1)[3], mle_coef[3], coef(lm1)[4],mle_coef[4], sigma(lm1),mle_coef[5]), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
coef(lm1)
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], coef(lm1)[2],coef(lm1)[3],coef(lm1)[4], mle_coef[5],mle_coef[1],mle_coef[2], mle_coef[3], mle_coef[4], sigma(lm1),), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], coef(lm1)[2],coef(lm1)[3],coef(lm1)[4], mle_coef[5],mle_coef[1],mle_coef[2], mle_coef[3], mle_coef[4], sigma(lm1)), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
summary(lm1)
sigma(lm1)
sigma(lm1)
sigma(lm1)
property.dat <- readRDS("S2-2022-q2.rds")
# Enter your answer here
dim(property.dat)
pairs(property.dat)
# Enter your answer here
lm1 = lm(Sold.price ~ land.estimate + existing + area,data = property.dat)
coef(lm1)
sigma(lm1)
lm1
summary(lm1)
# Enter your answer here
negLogLikelihood <- function(beta0, beta1, beta2,beta3, sigma) {
Y <- property.dat[["Sold.price"]]
X1 <- property.dat[["land.estimate"]]
X2 <- property.dat[["existing"]]
X3 <- property.dat[["area"]]
n <- nrow(property.dat)
if (sigma < 0)
return(Inf)
else
n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2-beta3*X3)^2)/(2*(sigma**2))
}
# Enter your answer here
mle <- stats4::mle(minuslogl = negLogLikelihood,start = list(beta0 = 0, beta1 = 0, beta2 = 0,beta3 = 0, sigma = 1))
mle_coef <- mle@coef
mle_coef
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], coef(lm1)[2],coef(lm1)[3],coef(lm1)[4], mle_coef[5],mle_coef[1],mle_coef[2], mle_coef[3], mle_coef[4], sigma(lm1)), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
coef(lm1)
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], coef(lm1)[2],coef(lm1)[3],coef(lm1)[4], sigma(lm1),mle_coef[1],mle_coef[2], mle_coef[3], mle_coef[4], mle_coef[5])), nrow = 5, ncol = 2,
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], coef(lm1)[2],coef(lm1)[3],coef(lm1)[4], sigma(lm1),mle_coef[1],mle_coef[2], mle_coef[3], mle_coef[4], sigma(lm1)), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
# Enter your answer here and edit some of the lines or add lines below as appropriate
coef.table <- matrix(c(coef(lm1)[1], coef(lm1)[2],coef(lm1)[3],coef(lm1)[4], sigma(lm1),mle_coef[1],mle_coef[2], mle_coef[3], mle_coef[4], mle_coef[5]), nrow = 5, ncol = 2,
dimnames = list(c(paste0("beta", 0:3), "sigma"), c("Least squares", "MLE")))
coef.table
# Enter your answer here
predict(lm1, data.frame(Sold.price = property.dat$Sold.price), interval = "confidence")
property.dat$Sold.price
# Enter your answer here
predict(lm1, data.frame(Sold.price = property.dat$Sold.price), interval = "confidence")
# Enter your answer here
predict(lm1, data.frame(land.estimate, existing, area ), interval = "confidence")
# Enter your answer here
predict(lm1, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence")
# Enter your answer here
head(predict(lm1, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence"))
head(predict(mle, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence"))
head(predict(mle@coef, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence"))
q1.df
q1.list <- readRDS("S2-2022-q1-list.rds")
q1.df <- readRDS("S2-2022-q1-df.rds")
# Enter your answer here
str(q1.list)
dim(q1.list)
q1pca = q1.df[1:10,]
q1pca
q1.df[,1:10]
property.dat
head(property.dat)
predict(lm1, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence")[,1]
# Enter your answer here
c(`RMSE:Least Squares` = NA, `RMSE: MLE` = NA) # Replace the NA values with the RMSE for each model
a = predict(lm1, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence")[,1]
lm2 = lm(a~property.dat$land.estimate+property.dat$existing+property.dat$area)
MSE <- RSS / length(lm2$residuals)
# Enter your answer here
c(`RMSE:Least Squares` = NA, `RMSE: MLE` = NA) # Replace the NA values with the RMSE for each model
a = predict(lm1, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence")[,1]
lm2 = lm(a~property.dat$land.estimate+property.dat$existing+property.dat$area)
RSS <- c(crossprod(lm2$residuals))
MSE <- RSS / length(lm2$residuals)
RMSE <- sqrt(MSE)
# Enter your answer here
c(`RMSE:Least Squares` = NA, `RMSE: MLE` = NA) # Replace the NA values with the RMSE for each model
a = predict(lm1, data.frame(land.estimate =property.dat[["land.estimate"]] , existing=property.dat[["existing"]], area=property.dat[["area"]]), interval = "confidence")[,1]
lm2 = lm(a~property.dat$land.estimate+property.dat$existing+property.dat$area)
RSS <- c(crossprod(lm2$residuals))
MSE <- RSS / length(lm2$residuals)
RMSE <- sqrt(MSE)
RMSE
