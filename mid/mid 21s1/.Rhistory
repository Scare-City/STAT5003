setNames(metrics, c("LDA", "SVM"))
metrics
predictions
models = list(lda.model, svm.model)
metrics <- lapply(models, \(x) {
predictions <- predict(x, newdata = test.data)
if (is.list(predictions))
predictions <- predictions[["class"]]
confusionMatrix(predictions, test.data$Will.recommend)
})
setNames(metrics, c("LDA", "SVM"))
metrics
q1.dat <- readRDS("q1dat.rds")
str(q1.dat)
q1.dat <- readRDS("q1dat.rds")
str(q1.dat)
plot(Y~X)
q1.dat <- readRDS("q1dat.rds")
str(q1.dat)
plot(Y~X, data =q1.dat)
q1.lm <- lm(Y ~ X, data = q1.dat)
lm1 <- lm(Y ~ X, data = q1.dat)
lm1$coefficients
lm1 <- lm(Y ~ X, data = q1.dat)
coef(q1.lm)
sigma(q1.lm)
plot(Y ~ X, data = q1.dat)
abline(q1.lm)
lm1$sd
lm1$sigma
lm1 <- lm(Y ~ X, data = q1.dat)
coef(q1.lm)
sigma(q1.lm)
lm1 <- lm(Y ~ X, data = q1.dat)
coef(lm1)
sigma(lm1)
plot(Y ~ X, data = q1.dat)
abline(q1.lm)
plot(Y ~ X, data = q1.dat)
abline(lm1)
negativeLikelihood <- function(beta0, beta1, sigma0) {
Y <- q1.dat[["Y"]]
X <- q1.dat[["X"]]
if (sigma0 >=0) return(Inf)
-length(X)*log(2*sigma0)+sum(abs(Y-beta0-beta1*X)/sigma0)
#negative MLE 加负号！！！
}
library(stats4)
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
coef(lm1)[1]
a = coef(lm1)[1]
q
a
a = c(a)
a
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
negativeLikelihood <- function(beta0, beta1, sigma0) {
Y <- q1.dat[["Y"]]
X <- q1.dat[["X"]]
if (sigma0 >=0) return(Inf)
-length(X)*log(2*sigma0)+sum(abs(Y-beta0-beta1*X)/sigma0)
#negative MLE 加负号！！！
}
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
coefs[1]
coef(lm1)[1]
coef(lm1)[2]
sigma(lm1)
starting.point <- list(beta0 = coef(lm1)[1], beta1 = coef(lm1)[2], sigma = sigma(lm1))
mle.estimates <- stats4::mle(negativeLikelihood, start = starting.point)
mle.estimates <- stats4::mle(negativeLikelihood, start = starting.point)
mle.estimates <- stats4::mle(negativeLikelihood, start = starting.point)
starting.point <- list(beta0 = coef(lm1)[1], beta1 = coef(lm1)[2], sigma = sigma(lm1))
mle.estimates <- stats4::mle(negativeLikelihood, start = starting.point)
q1.dat <- readRDS("q1dat.rds")
str(q1.dat)
plot(Y~X, data =q1.dat)
lm1 <- lm(Y ~ X, data = q1.dat)
coef(lm1)
sigma(lm1)
negativeLikelihood <- function(beta0, beta1, sigma0) {
Y <- q1.dat[["Y"]]
X <- q1.dat[["X"]]
if (sigma0 >=0) return(Inf)
-length(X)*log(2*sigma0)+sum(abs(Y-beta0-beta1*X)/sigma0)
#negative MLE 加负号！！！
}
negativeLikelihood <- function(beta0, beta1, sigma0) {
Y <- q1.dat[["Y"]]
X <- q1.dat[["X"]]
if (sigma0 <0) return(Inf)
-length(X)*log(2*sigma0)+sum(abs(Y-beta0-beta1*X)/sigma0)
#negative MLE 加负号！！！
}
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle
starting.point <- list(beta0 = coef(lm1)[1], beta1 = coef(lm1)[2], sigma = sigma(lm1))
mle.estimates <- stats4::mle(negativeLikelihood, start = starting.point)
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle.coef <- mle.estimates@coef
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle.coef <- mle@coef
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle.coef <- mle@coef
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle.coef <- mle@coef
mle.coef
negativeLikelihood <- function(beta0, beta1, sigma0) {
Y <- q1.dat[["Y"]]
X <- q1.dat[["X"]]
if (sigma0 <0) return(Inf)
length(X)*log(2*sigma0)+sum(abs(Y-beta0-beta1*X)/sigma0)
#negative MLE 加负号！！！
}
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
negativeLikelihood <- function(beta0, beta1, sigma0) {
Y <- q1.dat[["Y"]]
X <- q1.dat[["X"]]
if (sigma0 <0) return(Inf)
length(X)*log(2*sigma0)+sum(abs(Y-beta0-beta1*X)/sigma0)
#negative MLE 加负号！！！
}
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
negativeLikelihood <- function(beta0, beta1, sigma0) {
Y <- q1.dat[["Y"]]
X <- q1.dat[["X"]]
if (sigma0 <0) return(Inf)
length(X)*log(2*sigma0)+sum(abs(Y-beta0-beta1*X))/sigma0
#negative MLE 加负号！！！
}
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle
# mle.coef <- mle@coef
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle_coef <- mle@coef
matrix(c(coef(lm1)[1], coef(lm1)[2], mle_coef), nrow = 2, byrow = TRUE,
dimnames = list(c("Least Squares", "MLE"), c("beta0", "beta1", "sigma")))
mle <- stats4::mle(negativeLikelihood, start = list(beta0 = coef(lm1)[1], beta1=coef(lm1)[2], sigma0=sigma(lm1)))
mle_coef <- mle@coef
matrix(c(coef(lm1)[1], coef(lm1)[2], sigma(lm1), mle_coef), nrow = 2, byrow = TRUE,
dimnames = list(c("Least Squares", "MLE"), c("beta0", "beta1", "sigma")))
mle.coef[1:2]
rep(1,2)
plot(Y ~ X, data = q1.dat)
abline(q1.lm.coefs)
plot(Y ~ X, data = q1.dat)
abline(coef(lm1))
abline(mle.coef[1:2], col = 2)
legend("bottomright", legend = c("Least Squares line", "MLE Laplace line"), col = 1:2, lty = rep(1, 2))
encoded.data <- readRDS("encoded.data.rds")
encoded.data <- readRDS("encoded.data.rds")
encoded.data <- readRDS("encoded.data.rds")
View(encoded.data)
type(encoded.data)
str(encoded.data)
encoded.data[,1:9]
encoded_nolabels = encoded.data[,1:10]
dim(encoded_nolabels)
ncol(encoded.data)
encoded.data[[ncol(encoded.data)]]
pca <- prcomp(encoded_nolabels)
plot(pca$x[,1], pca$x[,2], col = encoded.data[[ncol(encoded.data)]],
xlab = "First Component", ylab = "Second Component")
legend("topright", legend = levels(encoded.data[[ncol(encoded.data)]]),
col = unclass(unique(encoded.data[[ncol(encoded.data)]])),
pch = 1)
pca
pca$x[,1]
variance.explained <- pca$sdev^2
cumulative.variance <- cumsum(prop.table(pca$sdev^2) * 100)
variance.explained
cumulative.variance
variance.explained <- pca$sdev^2
cumulative.variance <- cumsum(prop.table(pca$sdev^2) * 100)
variance.explained
cumulative.variance
plot(1:10, cumulative.variance, xlab = "Number of components", ylab = "Cumulative variance explained (%)", type = 'l')
abline(h = 80, lty = 'dotted')
abline(v = 5, lty = 'dashed')
?abline
which.max(cumulative.variance >= 80)
set.seed(5003)
B <- 34L
bootstrapped.indices <- replicate(B, sample.int(B, replace = TRUE, size = n.valid), simplify = FALSE)
set.seed(5003)
B <- 34L
bootstrapped.indices <- replicate(B, sample.int(B, replace = TRUE, size = B), simplify = FALSE)
bootstrapped.geyser <- lapply(bootstrapped.indices, \(x) encoded_nolabels[x])
nrow(encoded_nolabels)
clean.duration <- readRDS('clean-s1-22-q2.rds')
setwd("~/Desktop/STAT5003/2022/MId/mid 22s1")
clean.duration <- readRDS('clean-s1-22-q2.rds')
View(clean.duration)
clean.duration
setwd("~/Desktop/STAT5003/2022/MId/mid 21s1")
encoded.data <- readRDS("encoded.data.rds")
set.seed(5003)
B <- 34L
bootstrap.samples <- lapply(1:B, function(x) encoded_nolabels[sample(1:B, size = B, replace = TRUE), ])
alternative.bootstrap.indexing <- lapply(1:B, function(x) sample(1:B, size = B, replace = TRUE))
alternative.bootstrap.samples <- lapply(alternative.bootstrap.indexing, function(x) encoded_nolabels[x, ])
pcas <- lapply(bootstrap.samples, prcomp)
cumulative.variances <- vapply(pcas,
function(x) cumsum(prop.table(x[["sdev"]]^2) * 100),
numeric(10L))
cumulative.variances <- as.vector(cumulative.variances)
all.variances <- data.frame(`Cumulative variance` = cumulative.variances,
`Number of PCs` = 1:10, check.names = FALSE)
str(all.variances)
cumulative.variances[-1]
cumulative.variances[1]
cumulative.variances[-1]
cumulative.variances[length(cumulative.variances)]
pcas <- lapply(bootstrap.samples, prcomp)
cumulative.variances <- vapply(pcas,
function(x) cumsum(prop.table(x[["sdev"]]^2) * 100),
numeric(10L))
cumulative.variances <- as.vector(cumulative.variances)
all.variances <- data.frame(`Cumulative variance` = cumulative.variances,
`Number of PCs` = 1:10, check.names = FALSE)
cumulative.variances[length(cumulative.variances)]
str(all.variances)
boxplot(`Cumulative variance` ~ `Number of PCs`, data = all.variances)
covid <- readRDS("covid-data.rds")
str(covid)
dim(covid)
str(covid)
dim(covid)
summary(covid)
str(covid)
dim(covid)
covids <- transform(covids,NSW_and_VIC = NSW + VIC)
covids <- transform(covid, NSW_and_VIC = NSW + VIC)
dim(covids)
covids <- transform(covid, NSW_and_VIC = NSW + VIC)
head(covids)
plot(density(covids$NSW))
legend("topleft", legend = colnames(covid), col = 1:3, lty = 1:3)
plot(density(covids$NSW))
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
plot(covids$NSW, ty = 'l')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
plot(covids$NSW, lty = 'l', col = 'black')
plot(covids$NSW, lty = 1, col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
?plot
?plot
plot(covids$NSW, type = 'l', col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
plot(covids$NSW, type = 'l', col = 'black')
plot(covids$VIC, type = 'l', col = 'blue')
plot(covids$NSW_and_VIC, type = 'l', col = 'purple')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
plot(covids$NSW, type = 'l', col = 'black')
lines(covids$VIC, type = 'l', col = 'blue')
lines(covids$NSW_and_VIC, type = 'l', col = 'purple')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
plot(covids$NSW, type = 'l', col = 'black')
plot(covids$NSW_and_VIC, type = 'l', col = 'purple')
lines(covids$VIC, type = 'l', col = 'blue')
lines(covids$NSW, type = 'l', col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
plot(covids$NSW_and_VIC, type = 'l', col = 'purple')
lines(covids$VIC, type = 'l', col = 'blue')
lines(covids$NSW, type = 'l', col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1:3)
plot(covids$NSW_and_VIC, type = 'l', col = 'purple')
lines(covids$VIC, type = 'l', col = 'blue')
lines(covids$NSW, type = 'l', col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3)
plot(covids$NSW_and_VIC, type = 'l', col = 'purple')
lines(covids$VIC, type = 'l', col = 'blue')
lines(covids$NSW, type = 'l', col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1)
plot(covids$NSW_and_VIC, type = 'l', col = 'purple',xlab = "Time", ylab = "Number of cases", main = "Covid cases in NSW and VIC")
lines(covids$VIC, type = 'l', col = 'blue')
lines(covids$NSW, type = 'l', col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1)
# lty = 1:3
plot(covids$NSW_and_VIC, type = 'l', col = 'purple',xlab = "Time", ylab = "Number of cases", main = "Covid cases in NSW and VIC")
lines(covids$VIC, type = 'l', col = 'yellow')
lines(covids$NSW, type = 'l', col = 'black')
legend("topleft", legend = colnames(covids), col = 1:3, lty = 1)
# lty = 1:3
covids$NSW
sum(covids$NSW)
sum(covids$VIC)
plot(covids$NSW_and_VIC, type = 'l', col = 'purple',xlab = "Time", ylab = "Number of cases", main = "Covid cases in NSW and VIC")
lines(covids$VIC, type = 'l', col = 'yellow')
lines(covids$NSW, type = 'l', col = 'black')
lines(density(covids$NSW_and_VIC), type = 'l', col = 'red')
legend("topleft", legend = c(colnames(covid), "Smoother of NSW and VIC"), col = 1:4, lty = 1)
# lty = 1:3
loess(covids$NSW_and_VIC)
loess_nsw <- loess(covids$NSW_and_VIC, span=0.5)
density(covids$NSW_and_VIC
)
plot(density(covids$NSW_and_VIC))
?lowess
plot(covids$NSW_and_VIC, type = 'l', col = 'purple',xlab = "Time", ylab = "Number of cases", main = "Covid cases in NSW and VIC")
lines(covids$VIC, type = 'l', col = 'yellow')
lines(covids$NSW, type = 'l', col = 'black')
lines(lowess(covids$NSW_and_VIC), type = 'l', col = 'red')
legend("topleft", legend = c(colnames(covid), "Smoother of NSW and VIC"), col = 1:4, lty = 1)
# lty = 1:3
plot(covids$NSW_and_VIC, type = 'l', col = 'purple',xlab = "Time", ylab = "Number of cases", main = "Covid cases in NSW and VIC")
lines(covids$VIC, type = 'l', col = 'yellow')
lines(covids$NSW, type = 'l', col = 'black')
lines(lowess(covids$NSW_and_VIC), type = 'l', col = 'red')
legend("topleft", legend = c(colnames(covid), "Smoother of NSW and VIC"), col = 1:4, lty = 1)
# lty = 1:3
plot(covids$NSW_and_VIC, type = 'l', col = 'purple',xlab = "Time", ylab = "Number of cases", main = "Covid cases in NSW and VIC")
lines(covids$VIC, type = 'l', col = 'yellow')
lines(covids$NSW, type = 'l', col = 'black')
lines(lowess(covids$NSW_and_VIC), f= 0.025, type = 'l', col = 'red')
legend("topleft", legend = c(colnames(covid), "Smoother of NSW and VIC"), col = 1:4, lty = 1)
# lty = 1:3
?lowess
plot(covids$NSW_and_VIC, type = 'l', col = 'purple',xlab = "Time", ylab = "Number of cases", main = "Covid cases in NSW and VIC")
lines(covids$VIC, type = 'l', col = 'yellow')
lines(covids$NSW, type = 'l', col = 'black')
lines(lowess(covids$NSW_and_VIC,f= 0.025), type = 'l', col = 'red')
legend("topleft", legend = c(colnames(covid), "Smoother of NSW and VIC"), col = 1:4, lty = 1)
# lty = 1:3
library(mlbench)
SID <- 510188300 # INSERT YOUR SID AS AN INTEGER HERE
set.seed(SID)
simulated.data <- mlbench.2dnormals(n = 500, sd = 2)
q2.dat <- as.data.frame(simulated.data)
head(q2.dat)
dim(q2.dat)
str(q2.dat)
head(q2.dat)
dim(q2.dat)
str(q2.dat)
glm1 = glm(classes~., data = q2.dat)
glm1 = glm(classes~., data = q2.dat, family = binomial(link = "logit"))
glm1 = glm(classes~., data = q2.dat, family = binomial(link = "logit"))
glm1 = glm(classes~., data = q2.dat, family = binomial(link = "logit"))
summary(glm1)
log_predictions <- predict(glm1, newdata = q2.dat, type = "response")
# 1 is the negative class and 2 is the positive class
predictions <- ifelse(log_predictions > 0.5, 2, 1)
accuracy <- mean(predictions == q2.dat$classes)
accuracy
cM <- xtabs(~ predictions + q2.dat$classes)
TP <- cM[2, 2]
FP <- cM[2, 1]
FN <- cM[1, 2]
F1 <- 2 * TP/(2  * TP + FN + FP)
F1
cM
plot(x.2 ~ x.1, data = q2.dat, col = classes)
plot(x.2 ~ x.1, data = q2.dat, col = classes)
betas <- coef(glm1)
abline(a = -betas[1]/betas[3], b = -betas[2]/betas[3], lty = "dotted")
set.seed(5003)
library(caret)
fold <- createFolds(q2.dat$classes, k = 5)
test.fold.sizes <- vapply(fold, length, numeric(1))
# For convenience, put the 5 fold CV sets into a list
split.data.into.folds <- function(x, dat, n = nrow(dat)) {
which.group = factor(ifelse(seq(n) %in% x, "Test", "Training"))
split(dat, which.group)
}
training.test <- lapply(fold, split.data.into.folds, dat = q2.dat, n = nrow(q2.dat))
fitted.log.models <- function(x, k = 5, label.name = "classes") {
log.model <- glm(classes ~ ., data = x$Training, family = binomial(link = "logit"))
predicted <- factor(unname(ifelse(predict(log.model, newdata = x$Test) > 0.5, 2, 1)))
observed <- x$Test[[label.name]]
list(predicted = predicted, observed = observed)
}
log.output <- lapply(training.test, fitted.log.models)
accuracy.within <- vapply(log.output, function(x) mean(x$observed == x$predicted), numeric(1))
accuracy.within
mean(accuracy.within)
f1.within <- vapply(log.output, function(x) {
cM <- caret::confusionMatrix(x$predicted, x$observed, positive = "2")
cM[["byClass"]][["F1"]]
}, numeric(1))
f1.within
mean(f1.within)
data(BostonHousing, package = "mlbench")
q3.dat <- subset(BostonHousing, select = c("medv", "lstat", "rm"))
data(BostonHousing, package = "mlbench")
q3.dat <- subset(BostonHousing, select = c("medv", "lstat", "rm"))
dim(q3.dat)
pairs(q3.dat)
lm3 = lm(medv ~., data = q3.dat)
coef(lm3)
sigma(lm3)
pi
2pi
head(q3.dat)
x = 2
x^2
x**2
0.9**2
0.9^2
x^2
x**2
negativeLikelihood <- function(beta0, beta1, beta2, sigma) {
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["lstat"]]
X2 <- q3.dat[["rm"]]
if (sigma < 0) return(Inf)
n/2*log(2*pi)+length(Y) * log(sigma)+ sum(Y-beta0-beta1*X1-beta2*X2)/2*(sigma**2)
}
negativeLikelihood <- function(beta0, beta1, beta2, sigma) {
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["lstat"]]
X2 <- q3.dat[["rm"]]
if (sigma < 0) return(Inf)
n/2*log(2*pi)+length(Y) * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/2*(sigma**2)
}
mle <- stats4::mle(negativeLikelihood)
mle <- stats4::mle(minuslogl = negativeLikelihood)
lm3 = lm(medv ~ rm + lstat, data = q3.dat)
coef(lm3)
sigma(lm3)
length(Y)
Y <- q3.dat[["medv"]]
length(Y)
nrow(q3.dat)
View(q3.dat)
summary(q3.dat)
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["rm"]]
X2 <- q3.dat[["lstat"]]
n = nrow(q3.dat)
negativeLikelihood <- function(beta0 = 0, beta1 = 0, beta2 = 0, sigma = 1) {
if (sigma < 0) return(Inf)
n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/2*(sigma**2)
}
mle <- stats4::mle(minuslogl = negativeLikelihood)
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["rm"]]
X2 <- q3.dat[["lstat"]]
n = nrow(q3.dat)
negativeLikelihood <- function(beta0 = 0, beta1 = 0, beta2 = 0, sigma = 1) {
if (sigma < 0) return(Inf)
else n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/2*(sigma**2)
}
mle <- stats4::mle(minuslogl = negativeLikelihood)
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["rm"]]
X2 <- q3.dat[["lstat"]]
n = nrow(q3.dat)
negativeLikelihood <- function(beta0 = 0, beta1 = 0, beta2 = 0, sigma = 1) {
if (sigma < 0)
return(Inf)
else
out = n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/2*(sigma**2)
out
}
mle <- stats4::mle(minuslogl = negativeLikelihood)
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["rm"]]
X2 <- q3.dat[["lstat"]]
n = nrow(q3.dat)
negativeLikelihood <- function(beta0 = 0, beta1 = 0, beta2 = 0, sigma = 1) {
if (sigma < 0)
return(Inf)
else
out = n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/(2*(sigma**2))
out
}
mle <- stats4::mle(minuslogl = negativeLikelihood)
mle_coef <- mle@coef
mle_coef
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["rm"]]
X2 <- q3.dat[["lstat"]]
n = nrow(q3.dat)
negativeLikelihood <- function(beta0, beta1, beta2, sigma) {
if (sigma < 0)
return(Inf)
else
n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/(2*(sigma**2))
}
mle <- stats4::mle(minuslogl = negativeLikelihood)
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["rm"]]
X2 <- q3.dat[["lstat"]]
n = nrow(q3.dat)
negativeLikelihood <- function(beta0 = 0, beta1 = 0, beta2 = 0, sigma = 1) {
if (sigma < 0)
return(Inf)
else
n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/(2*(sigma**2))
}
mle <- stats4::mle(minuslogl = negativeLikelihood)
mle_coef <- mle@coef
mle_coef
Y <- q3.dat[["medv"]]
X1 <- q3.dat[["rm"]]
X2 <- q3.dat[["lstat"]]
n = nrow(q3.dat)
negativeLikelihood <- function(beta0 = 0, beta1 = 0, beta2 = 0, sigma = 1) {
if (sigma < 0)
return(Inf)
else
n/2*log(2*pi)+n * log(sigma)+ sum((Y-beta0-beta1*X1-beta2*X2)^2)/(2*(sigma**2))
}
mle <- stats4::mle(minuslogl = negativeLikelihood)
mle_coef <- mle@coef
mle_coef
matrix(c(coef(lm3)[1], coef(lm3)[2], coef(lm3)[3], sigma(lm3), mle_coef), nrow = 2, byrow = TRUE,dimnames = list(c("Least Squares", "MLE"), c("beta0", "beta1", "beta2","sigma")))
matrix(c(coef(lm3)[1], coef(lm3)[2], coef(lm3)[3], sigma(lm3), mle_coef), nrow = 2, byrow = TRUE,dimnames = list(c("Least Squares", "MLE"), c("beta0", "beta1", "beta2","sigma")))
lm3_coef <- c(coef(lm3), sigma(lm3))
lm3_coef - mle_coef
